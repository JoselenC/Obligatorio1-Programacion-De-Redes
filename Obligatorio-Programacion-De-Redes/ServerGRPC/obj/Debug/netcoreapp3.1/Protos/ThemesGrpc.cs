// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/themes.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ServerGRPC {
  public static partial class ThemeGrpc
  {
    static readonly string __ServiceName = "themes.ThemeGrpc";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::ServerGRPC.AddThemesRequest> __Marshaller_themes_AddThemesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServerGRPC.AddThemesRequest.Parser));
    static readonly grpc::Marshaller<global::ServerGRPC.AddThemesReply> __Marshaller_themes_AddThemesReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServerGRPC.AddThemesReply.Parser));
    static readonly grpc::Marshaller<global::ServerGRPC.DeleteThemeRequest> __Marshaller_themes_DeleteThemeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServerGRPC.DeleteThemeRequest.Parser));
    static readonly grpc::Marshaller<global::ServerGRPC.DeleteThemeReply> __Marshaller_themes_DeleteThemeReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServerGRPC.DeleteThemeReply.Parser));
    static readonly grpc::Marshaller<global::ServerGRPC.ModifyThemeRequest> __Marshaller_themes_ModifyThemeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServerGRPC.ModifyThemeRequest.Parser));
    static readonly grpc::Marshaller<global::ServerGRPC.ModifyThemeReply> __Marshaller_themes_ModifyThemeReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServerGRPC.ModifyThemeReply.Parser));

    static readonly grpc::Method<global::ServerGRPC.AddThemesRequest, global::ServerGRPC.AddThemesReply> __Method_AddTheme = new grpc::Method<global::ServerGRPC.AddThemesRequest, global::ServerGRPC.AddThemesReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddTheme",
        __Marshaller_themes_AddThemesRequest,
        __Marshaller_themes_AddThemesReply);

    static readonly grpc::Method<global::ServerGRPC.DeleteThemeRequest, global::ServerGRPC.DeleteThemeReply> __Method_DeleteTheme = new grpc::Method<global::ServerGRPC.DeleteThemeRequest, global::ServerGRPC.DeleteThemeReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTheme",
        __Marshaller_themes_DeleteThemeRequest,
        __Marshaller_themes_DeleteThemeReply);

    static readonly grpc::Method<global::ServerGRPC.ModifyThemeRequest, global::ServerGRPC.ModifyThemeReply> __Method_ModifyTheme = new grpc::Method<global::ServerGRPC.ModifyThemeRequest, global::ServerGRPC.ModifyThemeReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyTheme",
        __Marshaller_themes_ModifyThemeRequest,
        __Marshaller_themes_ModifyThemeReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ServerGRPC.ThemesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ThemeGrpc</summary>
    [grpc::BindServiceMethod(typeof(ThemeGrpc), "BindService")]
    public abstract partial class ThemeGrpcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::ServerGRPC.AddThemesReply> AddTheme(global::ServerGRPC.AddThemesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServerGRPC.DeleteThemeReply> DeleteTheme(global::ServerGRPC.DeleteThemeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServerGRPC.ModifyThemeReply> ModifyTheme(global::ServerGRPC.ModifyThemeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ThemeGrpcBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddTheme, serviceImpl.AddTheme)
          .AddMethod(__Method_DeleteTheme, serviceImpl.DeleteTheme)
          .AddMethod(__Method_ModifyTheme, serviceImpl.ModifyTheme).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ThemeGrpcBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddTheme, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServerGRPC.AddThemesRequest, global::ServerGRPC.AddThemesReply>(serviceImpl.AddTheme));
      serviceBinder.AddMethod(__Method_DeleteTheme, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServerGRPC.DeleteThemeRequest, global::ServerGRPC.DeleteThemeReply>(serviceImpl.DeleteTheme));
      serviceBinder.AddMethod(__Method_ModifyTheme, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServerGRPC.ModifyThemeRequest, global::ServerGRPC.ModifyThemeReply>(serviceImpl.ModifyTheme));
    }

  }
}
#endregion
